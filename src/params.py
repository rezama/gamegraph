'''
Created on Sep 11, 2012

@author: reza
'''
# Common params.
# --------------------------------------------------------------------
MAX_MOVES_PER_GAME = 200

NUM_TRIALS = 10

# NUM_STATS_GAMES = 10000
NUM_STATS_GAMES = 10000

COLLECT_STATS = False
SAVE_STATS = False
# COLLECT_STATS = True
# SAVE_STATS = True

PRINT_GAME_RESULTS = False
PRINT_GAME_DETAIL = False
# PRINT_GAME_RESULTS = True
# PRINT_GAME_DETAIL = True

# When True, agents take turn playing as white and black.  When false, the
# learning algorithms train agents that specialize in playing as white or black.
ALTERNATE_SEATS = True
# ALTERNATE_SEATS = False
USE_SEEDS = True

# CHOOSE_ROLL_P = 1.0

GENERATE_GRAPH_REPORT_EVERY_N_STATES = 1000
# RECORD_GRAPH = False

EVAL_OPPONENT_RANDOM = 'EVAL_OPPONENT_RANDOM'
EVAL_OPPONENT_SARSA = 'EVAL_OPPONENT_SARSA'
EVAL_OPPONENT_OPTIMAL = 'EVAL_OPPONENT_OPTIMAL'
EVAL_OPPONENT = EVAL_OPPONENT_OPTIMAL

TRAIN_BUDDY_SELF = 'TRAIN_BUDDY_SELF'
TRAIN_BUDDY_COPY = 'TRAIN_BUDDY_COPY'
TRAIN_BUDDY_RANDOM = 'TRAIN_BUDDY_RANDOM'
TRAIN_BUDDY = TRAIN_BUDDY_SELF

# Affects both app_sarsa.py and app_ntd.py.
TD_ALGO_Q_LEARNING = 'TD_ALGO_Q_LEARNING'
TD_ALGO_SARSA = 'TD_ALGO_SARSA'
TD_ALGO = TD_ALGO_Q_LEARNING

VALUE_ITER_MIN_RESIDUAL = 0.00001

EXP_BACK_RANGE = [100, 90, 50, 10, 0]
EXP_CHOOSEROLL_RANGE = ['0.0', '0.1', '0.5', '0.9', '1.0']

# --------------------------------------------------------------------
NTD_NUM_ITERATIONS = 1000
NTD_NUM_TRAINING_GAMES = 512  # 64
NTD_NUM_EVAL_GAMES = 512

NTD_GAMMA = 1.0
NTD_ALPHA = 0.1
NTD_EPSILON = 0.05
NTD_LAMBDA = 0.7
# NTD_LAMBDA = 0.0

NTD_NETWORK_INIT_WEIGHTS = None

NTD_TRAIN_EPOCHS = 1
# NTD_LEARNING_RATE = 0.1
NTD_LEARNING_RATE = 0.01

# NTD_USE_ALPHA_ANNEALING = True
NTD_USE_ALPHA_ANNEALING = False

# NTD_USE_EPSILON_ANNEALING = False
NTD_USE_EPSILON_ANNEALING = True
NTD_EPSILON_START = 1.0
NTD_EPSILON_END = NTD_EPSILON
NTD_EPSILON_ANNEAL_TIME = 100  # Reach NTD_EPSILON_END after this many visits.

# 1 output: Network predict probability for white winning.
# 2 outputs: Network predicts probability for white and black winning.
NTD_NUM_OUTPUTS = 2

# --------------------------------------------------------------------
SARSA_GAMMA = 1.0
SARSA_ALPHA = 0.001
SARSA_EPSILON = 0.05
SARSA_LAMBDA = 0.90
# SARSA_LAMBDA = 0.0

SARSA_USE_ALPHA_ANNEALING = True

SARSA_OPTIMISTIC_INIT = True

SARSA_NUM_TRAINING_ITERATIONS = 30
SARSA_NUM_EPISODES_PER_ITERATION = 3000
SARSA_NUM_EVAL_EPISODES = 1024

SARSA_SAVE_TABLES = True
# SARSA_SAVE_STATE_VALUES_IN_GRAPH = False

# --------------------------------------------------------------------
HC_NUM_GENERATIONS = 1000
# HC_NUM_GENERATIONS = 5

HC_NUM_CHALLENGE_GAMES = 6
HC_CHALLENGER_NEEDS_TO_WIN = 5
HC_NUM_EVAL_GAMES = 1024
HC_EVALUATE_EVERY_N_GENERATIONS = 10

HC_RATIO_KEEP_CHAMPION_WEIGHTS = 0.95
HC_MUTATE_WEIGHT_SIGMA = 0.22  # 0.05

# --------------------------------------------------------------------
GAMESET_PROGRESS_REPORT_EVERY_N_GAMES = SARSA_NUM_EPISODES_PER_ITERATION / 1000
GAMESET_RECENT_WINNERS_LIST_SIZE = 3000
GAMESET_PROGRESS_REPORT_USE_GZIP = False
